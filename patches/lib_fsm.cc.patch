diff --git a/lib/fsm.cc b/lib/fsm.cc
index 63580c2..805c9f3 100644
--- a/lib/fsm.cc
+++ b/lib/fsm.cc
@@ -4,6 +4,10 @@
  */
 
 #include "system.h"
+#if defined(__MVS__)
+#include <sys/time.h>
+#include <sys/sys_time.h>
+#endif
 
 #include <inttypes.h>
 #include <utime.h>
@@ -167,7 +171,7 @@ static int fsmOpen(int *wfdp, int dirfd, const char *dest)
 {
     int rc = 0;
     /* Create the file with 0200 permissions (write by owner). */
-    int fd = openat(dirfd, dest, O_WRONLY|O_EXCL|O_CREAT, 0200);
+    int fd = openat(dirfd, dest, O_WRONLY|O_EXCL|O_CREAT,  (0200));
 
     if (fd < 0)
 	rc = RPMERR_OPEN_FAILED;
@@ -293,7 +297,7 @@ static int fsmMkdir(int dirfd, const char *path, mode_t mode)
     int rc = mkdirat(dirfd, path, (mode & 07777));
     if (_fsm_debug)
 	rpmlog(RPMLOG_DEBUG, " %8s (%d %s, 0%04o) %s\n", __func__,
-	       dirfd, path, (unsigned)(mode & 07777),
+	       dirfd, path, ((unsigned)(mode & 07777)),
 	       (rc < 0 ? strerror(errno) : ""));
     if (rc < 0)	rc = RPMERR_MKDIR_FAILED;
     return rc;
@@ -302,8 +306,19 @@ static int fsmMkdir(int dirfd, const char *path, mode_t mode)
 static int fsmOpenat(int *wfdp, int dirfd, const char *path, int flags, int dir)
 {
     struct stat lsb, sb;
-    int sflags = flags | O_NOFOLLOW;
-    int fd = openat(dirfd, path, sflags);
+    int fd, sflags = flags | O_NOFOLLOW;
+#ifdef __MVS__
+    if (path && path[0] == '/' && path[1] == '\0') {
+       fd = openat(dirfd, path, flags);    // O_RDONLY only, no O_NOFOLLOW
+    }
+    else
+    {
+       fd = openat(dirfd, path, sflags);
+    }
+#else
+    fd = openat(dirfd, path, sflags);
+#endif
+    
     int rc = 0;
 
     /*
@@ -360,11 +375,11 @@ static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,
 	rc = fsmMkdir(dirfd, dn, mode);
 
     if (!rc) {
-	rc = fsmOpenat(fdp, dirfd, dn, O_RDONLY|O_NOFOLLOW, 1);
+	rc = fsmOpenat(fdp, dirfd, dn, O_RDONLY, 1);
     }
 
     if (!rc) {
-	rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, *fdp, apath, apath, mode, op);
+	rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, *fdp, apath, apath,mode, op);
     }
 
     /* Run fsm file post hook for all plugins */
@@ -373,7 +388,7 @@ static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,
     if (!rc) {
 	rpmlog(RPMLOG_DEBUG,
 		"%s directory created with perms %04o\n",
-		apath, (unsigned)(mode & 07777));
+		apath,((unsigned)(mode & 07777)));
     }
 
     return rc;
@@ -442,7 +457,7 @@ static int fsmMkfifo(int dirfd, const char *path, mode_t mode)
 
     if (_fsm_debug) {
 	rpmlog(RPMLOG_DEBUG, " %8s (%d %s, 0%04o) %s\n",
-	       __func__, dirfd, path, (unsigned)(mode & 07777),
+	       __func__, dirfd, path, ((unsigned)(mode & 07777)),
 	       (rc < 0 ? strerror(errno) : ""));
     }
 
@@ -459,7 +474,7 @@ static int fsmMknod(int dirfd, const char *path, mode_t mode, dev_t dev)
 
     if (_fsm_debug) {
 	rpmlog(RPMLOG_DEBUG, " %8s (%d %s, 0%o, 0x%x) %s\n",
-	       __func__, dirfd, path, (unsigned)(mode & ~07777),
+	       __func__, dirfd, path, ((unsigned)(mode & ~07777)),
 	       (unsigned)dev, (rc < 0 ? strerror(errno) : ""));
     }
 
@@ -478,10 +493,10 @@ static void removeSBITS(int dirfd, const char *path)
 	int rc = 0;
 	/* We now know it's not a link so no need to worry about following */
 	if ((stb.st_mode & 06000) != 0) {
-	    rc += fchmodat(dirfd, path, stb.st_mode & 0777, 0);
+	    rc += fchmodat(dirfd, path, (stb.st_mode & 0777), 0);
 	}
 #ifdef WITH_CAP
-	if (stb.st_mode & (S_IXUSR|S_IXGRP|S_IXOTH)) {
+	if ((stb.st_mode & (S_IXUSR|S_IXGRP|S_IXOTH))) {
 	    rc += cap_set_fileat(dirfd, path, NULL);
 	}
 #endif
@@ -492,7 +507,7 @@ static void fsmDebug(const char *dn, const char *fpath, rpmFileAction action,
 		     const struct stat *st)
 {
     rpmlog(RPMLOG_DEBUG, "%-10s %06o%3d (%4d,%4d)%6d %s%s\n",
-	   fileActionString(action), (int)st->st_mode,
+	   fileActionString(action),(int)(st->st_mode),
 	   (int)st->st_nlink, (int)st->st_uid,
 	   (int)st->st_gid, (int)st->st_size,
 	    (dn ? dn : ""), (fpath ? fpath : ""));
@@ -593,7 +608,7 @@ static int fsmChmod(int fd, int dirfd, const char *path, mode_t mode)
 	rc = fchmod(fd, fmode);
 	if (rc < 0) {
 	    struct stat st;
-	    if (fstat(fd, &st) == 0 && (st.st_mode & 07777) == fmode) {
+	    if (fstat(fd, &st) == 0 && (st.st_mode & 07777) == (fmode)) {
 		rc = 0;
 	    }
 	}
@@ -602,7 +617,7 @@ static int fsmChmod(int fd, int dirfd, const char *path, mode_t mode)
 	if (rc < 0) {
 	    struct stat st;
 	    if (fstatat(dirfd, path, &st, AT_SYMLINK_NOFOLLOW) == 0 &&
-		    (st.st_mode & 07777) == fmode) {
+		    (st.st_mode & 07777) == (fmode)) {
 		rc = 0;
 	    }
 	}
@@ -615,6 +630,7 @@ static int fsmChmod(int fd, int dirfd, const char *path, mode_t mode)
     return rc;
 }
 
+#if 0
 static int fsmUtime(int fd, int dirfd, const char *path, mode_t mode, time_t mtime)
 {
     int rc = 0;
@@ -637,6 +653,37 @@ static int fsmUtime(int fd, int dirfd, const char *path, mode_t mode, time_t mti
 	rc = 0;
     return rc;
 }
+#endif 
+
+static int fsmUtime(int fd, int dirfd, const char *path, mode_t mode, time_t mtime)
+{
+    int rc = 0;
+
+    if (fd >= 0) {
+        // futimes() expects struct timeval
+        struct timeval stamps[2] = {
+            { .tv_sec = mtime, .tv_usec = 0 },
+            { .tv_sec = mtime, .tv_usec = 0 },
+        };
+        rc = futimes(fd, stamps);
+    } else {
+        // utimensat() expects struct timespec
+        struct timespec stamps[2] = {
+            { .tv_sec = mtime, .tv_nsec = 0 },
+            { .tv_sec = mtime, .tv_nsec = 0 },
+        };
+        rc = utimensat(dirfd, path, stamps, AT_SYMLINK_NOFOLLOW);
+    }
+
+    if (_fsm_debug)
+        rpmlog(RPMLOG_DEBUG, " %8s (%d - %d %s, 0x%x) %s\n", __func__,
+               fd, dirfd, path, (unsigned)mtime, (rc < 0 ? strerror(errno) : ""));
+    if (rc < 0) rc = RPMERR_UTIME_FAILED;
+    /* ...but utime error is not critical for directories */
+    if (rc && S_ISDIR(mode))
+        rc = 0;
+    return rc;
+}
 
 static int fsmVerify(int dirfd, const char *path, rpmfi fi)
 {
@@ -748,19 +795,19 @@ static int fsmSetmeta(int fd, int dirfd, const char *path,
 	rc = fsmChown(fd, dirfd, path, st->st_mode, st->st_uid, st->st_gid);
     }
     if (!rc && !S_ISLNK(st->st_mode)) {
-	rc = fsmChmod(fd, dirfd, path, st->st_mode);
+	rc = fsmChmod(fd, dirfd, path, (st->st_mode));
     }
     /* Set file capabilities (if enabled) */
     if (!rc && !nofcaps && S_ISREG(st->st_mode) && !getuid()) {
 	rc = fsmSetFCaps(fd, dirfd, path, rpmfiFCaps(fi));
     }
     if (!rc) {
-	rc = fsmUtime(fd, dirfd, path, st->st_mode, rpmfiFMtime(fi));
+	rc = fsmUtime(fd, dirfd, path, (st->st_mode), rpmfiFMtime(fi));
     }
     if (!rc) {
 	rc = rpmpluginsCallFsmFilePrepare(plugins, fi,
 					  fd, path, dest,
-					  st->st_mode, action);
+					  (st->st_mode), action);
     }
     free(dest);
 
@@ -961,7 +1008,7 @@ int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,
 	    /* Run fsm file pre hook for all plugins */
 	    if (!rc)
 		rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,
-					      fp->sb.st_mode, fp->action);
+					      (fp->sb.st_mode), fp->action);
 	    if (rc)
 		goto setmeta; /* for error notification */
 
@@ -1020,8 +1067,9 @@ int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,
                 }
             } else {
                 /* XXX Special case /dev/log, which shouldn't be packaged anyways */
-                if (!IS_DEV_LOG(fp->fpath))
+                if (!IS_DEV_LOG(fp->fpath)) {
                     rc = RPMERR_UNKNOWN_FILETYPE;
+		}
             }
 
 setmeta:
@@ -1155,7 +1203,7 @@ int rpmPackageFilesRemove(rpmts ts, rpmte te, rpmfiles files,
         if (fp->action == FA_ERASE) {
 	    int missingok = (rpmfiFFlags(fi) & (RPMFILE_MISSINGOK | RPMFILE_GHOST));
 
-	    rc = fsmRemove(di.dirfd, fp->fpath, fp->sb.st_mode);
+	    rc = fsmRemove(di.dirfd, fp->fpath, (fp->sb.st_mode));
 
 	    /*
 	     * Missing %ghost or %missingok entries are not errors.
